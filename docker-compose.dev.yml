services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bandsyte-postgres-dev
    environment:
      POSTGRES_DB: bandsyte_dev
      POSTGRES_USER: bandsyte_user
      POSTGRES_PASSWORD: bandsyte_password
    ports:
      - '5433:5432' # Use 5433 to avoid local conflicts
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U bandsyte_user -d bandsyte_dev']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bandsyte-redis-dev
    ports:
      - '6379:6379'
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # API Server (Development)
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: bandsyte-api-dev
    ports:
      - '5001:5001'
    environment:
      - NODE_ENV=development
    env_file:
      - .env.docker
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:5001/api/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web App (Development with hot reloading)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: bandsyte-web-dev
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5001 # For browser access
      - API_BASE_URL=http://api:5001/api # For server-side requests
      - DEV_TENANT_ID=579930bf-ea5b-4b8a-a108-625ae19886ee # Logan's Run tenant ID
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_dev_data:
  redis_dev_data:
