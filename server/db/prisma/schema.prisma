generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                 @id @default(uuid())
  name                  String
  subDomain             String?                @unique
  domain                String                 @unique
  isCustomDomain        Boolean                @default(false)
  bio                   Bio?
  contactInfo           ContactInfo?
  featuredReleases      FeaturedRelease[]
  featuredVideos        FeaturedVideo[]
  homeImages            HomeImage[]
  mediaImages           MediaImage[]
  members               Member[]
  merchConfig           MerchConfig?
  newsletterSubscribers NewsletterSubscriber[]
  Session               Session[]
  shows                 Show[]
  showsSettings         ShowsSettings?
  spotifyPlayers        SpotifyPlayer[]
  theme                 Theme?
  user                  User?
  videos                Video[]
}

model User {
  id                  String    @id @default(uuid())
  tenantId            String    @unique
  bandName            String
  adminEmail          String    @unique
  password            String
  role                String
  userType            String
  status              String
  verified            Boolean   @default(false)
  invitedByUUID       String?
  deactivatedByUUID   String?
  deactivatedAt       DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
  twoFactorEnabled    Boolean   @default(false)
  twoFactorCode       String?
  twoFactorCodeExpiry DateTime?
  securityPreferences Json?
  isActive            Boolean   @default(true)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  lastFailedLogin     DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  adminPhone          String?
  sessions            Session[]
  tenant              Tenant    @relation(fields: [tenantId], references: [id])
}

model Session {
  id         String    @id @default(uuid())
  userId     String
  sessionId  String    @unique
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  expiresAt  DateTime
  isActive   Boolean   @default(true)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([tenantId, userId, isActive])
  @@index([userId, isActive])
  @@index([expiresAt])
}

model NewsletterSubscriber {
  id                String    @id @default(uuid())
  tenantId          String
  email             String
  isActive          Boolean   @default(true)
  unsubscribeToken  String?   @unique
  preferences       Json?
  signupSource      String?
  bouncedAt         DateTime?
  bounceType        String?
  bounceReason      String?
  complaintType     String?
  unsubscribeReason String?
  subscribedAt      DateTime  @default(now())
  lastEmailSent     DateTime?
  unsubscribedAt    DateTime?
  updatedAt         DateTime  @updatedAt
  tenant            Tenant    @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, email])
}

model Theme {
  id                   String   @id @default(uuid())
  tenantId             String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  backgroundColor      String?  @default("black")
  bandLogoUrl          String?
  enableNewsletter     Boolean  @default(true)
  greeting             String?
  headerDisplay        String?  @default("band-name-and-logo")
  headerPosition       String?  @default("left")
  introduction         String?
  notifyOnNewMusic     Boolean  @default(false)
  notifyOnNewShows     Boolean  @default(false)
  notifyOnNewVideos    Boolean  @default(false)
  paceTheme            String?  @default("minimal")
  primaryColor         String?  @default("#000000")
  primaryFont          String?  @default("Anton")
  secondaryColor       String?  @default("#000000")
  secondaryFont        String?  @default("Oswald")
  siteTitle            String?  @default("Logan's Run")
  socialMediaIconStyle String?  @default("default")
  bandHeaderLogoUrl    String?
  isDefault            Boolean? @default(false)
  tenant               Tenant   @relation(fields: [tenantId], references: [id])
}

model Bio {
  id             String   @id @default(uuid())
  tenantId       String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  customImageUrl String?
  imageType      String   @default("band-logo")
  name           String?
  text           String?
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
}

model ContactInfo {
  id          String   @id @default(uuid())
  tenantId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appleMusic  String?
  facebook    String?
  instagram   String?
  publicEmail String?
  publicPhone String?
  soundcloud  String?
  spotify     String?
  tiktok      String?
  x           String?
  youtube     String?
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Member {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  role      String
  bioPic    String?
  facebook  String?
  instagram String?
  tiktok    String?
  youtube   String?
  x         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Show {
  id        String    @id @default(uuid())
  tenantId  String
  poster    String?
  venue     String?
  location  String?
  date      DateTime?
  doors     DateTime?
  showtime  DateTime?
  doorprice String?
  advprice  String?
  tixlink   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
}

model Video {
  id        String        @id @default(uuid())
  tenantId  String
  title     String?
  date      DateTime?
  link      String?
  embedLink String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  category  VideoCategory
  tenant    Tenant        @relation(fields: [tenantId], references: [id])
}

model FeaturedVideo {
  id             String   @id @default(uuid())
  tenantId       String
  title          String
  description    String
  videoType      String
  displayMode    String
  youtubeLink    String
  videoFile      String?
  videoThumbnail String?
  videoDuration  Int?
  videoFileSize  Int?
  startTime      Int?
  endTime        Int?
  releaseDate    DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
}

model FeaturedRelease {
  id          String    @id @default(uuid())
  tenantId    String
  coverImage  String
  title       String
  releaseDate DateTime
  musicLink   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        MusicType
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
}

model MediaImage {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  imgLink   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model HomeImage {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  imgLink   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model MerchConfig {
  id                    String   @id @default(uuid())
  tenantId              String   @unique
  storeType             String
  shopDomain            String?
  storefrontAccessToken String?
  collectionId          String?
  paymentLinkIds        String[]
  publishableKey        String?
  storefrontUrl         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  tenant                Tenant   @relation(fields: [tenantId], references: [id])
}

model ShowsSettings {
  id                String   @id @default(uuid())
  tenantId          String   @unique
  showSystem        String?
  bandsintownArtist String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
}

model SpotifyPlayer {
  id             String     @id @default(uuid())
  tenantId       String
  title          String?
  date           DateTime?
  bgColor        String?
  spotifyLink    String?
  embedLink      String?
  appleMusicLink String?
  youtubeLink    String?
  soundcloudLink String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  type           MusicType?
  tenant         Tenant     @relation(fields: [tenantId], references: [id])
}

enum VideoCategory {
  LIVE_PERFORMANCE
  VLOG
  MUSIC_VIDEO
  LYRIC_VIDEO
}

enum MusicType {
  SINGLE
  ALBUM
  EP
  LP
}
